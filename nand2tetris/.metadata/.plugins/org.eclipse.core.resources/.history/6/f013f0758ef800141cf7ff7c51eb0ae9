package Assembler;

import java.io.File;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.nio.ByteBuffer;

public class Assembler {

	File file;
	FileOutputStream out;
	OutputStreamWriter writer;
	Parser parser;
	SymbolTable table;
	int finalAddress = 0x10;
	ByteBuffer data;
	
	Assembler(String infile, String outfile) throws IOException{
		parser = new Parser(infile);
		file = new File(outfile);
		out = new FileOutputStream(file);
		writer = new OutputStreamWriter(out);
		table = new SymbolTable();
		data = new ByteBuffer;
	}
	
	byte[] cCommand(String dest, String comp, String jump){
		byte[] bytes = ByteBuffer.allocate(4).putInt(0xE000 | Code.dest(dest) | Code.comp(comp) | Code.jump(jump)).array();
		byte[] code = {bytes[2], bytes[3]};
		return code;
	}
	
	byte[] aCommand(String symbol){
		byte[] bytes = ByteBuffer.allocate(4).putInt(0xEFFF & table.getAddress(symbol)).array();
		byte[] code = {bytes[2], bytes[3]};
		return code;
	}
	
	void createSymbolTable() throws IOException{
		int address = finalAddress++;
		while(parser.hasMoreCommands()){
			if(parser.symbol.matches("\\d+(\\.\\d+)?")){
				address = Integer.parseInt(parser.symbol);
			}
			table.addEntry(parser.symbol, address);
		}
	}
}
