package VMtranslator;

import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.NoSuchElementException;
import java.util.Scanner;

public class Parser {
	private File file;
	private FileInputStream in;
	private InputStreamReader reader;
	String command;
	String type;
	private String arg1;
	private String arg2;
	StringBuilder data;

	static enum Type{
		C_ARITHMETIC,C_PUSH, C_POP, C_LABEL, C_GOTO, C_IF, C_FUNCTION, C_RETURN, C_CALL
	};

	Scanner scan;

	Parser(String filename) throws IOException {
		this.file = new File(filename);
		in = new FileInputStream(file);
		reader = new InputStreamReader(in);
		char[] data = new char[(int) file.length()];
		reader.read(data);
		this.data = new StringBuilder().append((new String(data)).replaceAll(
				"//.*\n?", ""));
		reader = new InputStreamReader(new ByteArrayInputStream(this.data
				.toString().getBytes(("UTF-8"))));
		scan = new Scanner(this.data.toString());
	}

	boolean hasMoreCommands() {
		return scan.hasNext(".+");
	}

	void advance() {
		arg1 = "";
		arg2 = "";
		try {
			while ((command = scan.nextLine())
					.matches("\\r|\\r\\n||\\n||\\n\\r"))
				;
			String[] cmds = command.split(" ");
			type = cmds[0].toLowerCase().replaceAll("\\p{Space}+", "");
			if (cmds.length > 1) {
				arg1 = cmds[1].replaceAll("\\p{Space}+", "");
			}

			if (cmds.length > 2) {
				arg2 = cmds[2].replaceAll("\\p{Space}+", "");
			}

		} catch (NoSuchElementException e) {
		}
	}

	Type commandType() {
		if (type.equals("push"))
			return Type.C_PUSH;
		else if (type.equals("pop"))
			return Type.C_POP;
		else if (type.equals("label"))
			return Type.C_LABEL;
		else if (type.equals("goto"))
			return C_GOTO;
		else if (type.equals("if-goto"))
			return C_IF;
		else if (type.equals("function"))
			return C_FUNCTION;
		else if (type.equals("return"))
			return C_RETURN;
		else if (type.equals("call"))
			return C_CALL;
		else
			return C_ARITHMETIC;
	}

	String arg1() {
		return arg1;
	}

	String arg2() {
		return arg2;
	}

	// debug
	public static void main(String args[]) throws IOException {
		Parser a = new Parser("SimpleAdd.vm");
		System.out.println(a.data);
		while (a.hasMoreCommands()) {
			a.advance();
			System.out.println("CMD   :" + a.command);
			System.out.println("TYPE  :" + a.type);
			System.out.println("TYPE  :" + a.commandType());
			System.out.println("ARG1  :" + a.arg1);
			System.out.println("ARG2  :" + a.arg2);

			System.out.println();
		}
	}
}
