package Compiler;

import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.NoSuchElementException;
import java.util.Scanner;

import VMtranslator.Parser;

public class JackTokenizer {

	private File file;
	private FileInputStream in;
	private InputStreamReader reader;
	private Scanner scan;
	private String data;
	private String symbol;
	private String identifier;
	private String keyword;
	private String integerConstant;
	private String stringConstant;
	
	JackTokenizer(String filename) throws IOException{
		this.file = new File(filename);
		in = new FileInputStream(file);
		reader = new InputStreamReader(in);
		char[] data = new char[(int) file.length()];
		reader.read(data);
		this.data = (new String(data))
				.replaceAll("(?://.*)|(/\\*(?:.|[\\n\\r])*?\\*/)", "")
				.replaceAll("\n|\r|\n\r|\r\n", "")
				.replaceAll(
						"(\\{|\\}|\\(|\\)|;|\\.|\\,|\\+|-|\\*|/|&|\\||<|>|=|~)"," $1 ")
				.replaceAll(" +", " ")
				.replaceAll("<", "&lt;")
				.replaceAll(">", "&gt;")
				.replaceAll("&", "&amp;");
		reader = new InputStreamReader(new ByteArrayInputStream(
				this.data.getBytes("UTF-8")));
		scan = new Scanner(this.data);
	}
	
	boolean hasMoreTokens(){
		return scan.hasNext();
	}
	
	String advance() {
		String str = scan.next();
		symbol = "";
		keyword = "";
		identifier = "";
		integerConstant = "";
		stringConstant = "";
		if(str.matches("\\{|\\}|\\(|\\)|;|\\.|\\,|\\+|-|\\*|/|&|\\||<|>|=|~")){
			symbol = str;
		} else if(str.matches("class|constructor|function|method|field|static|var|true|false|null|this|let|do|if|else|while|return")){
			keyword = str;
		} else if(str.matches("\\p{Alpha}(\\p{Alnum}|_)*")){
			identifier = str;
		} else if(str.matches("[0-9]+")){
			integerConstant = str;
		} else if(str.matches("\".*\"?")){
			str = str.replaceAll("\"", "");
			stringConstant = str;
		}
		return str;
	}
	
	TokenType tokenType() throws Exception{
		if(!symbol.isEmpty()){
			return TokenType.SYMBOL;
		} else if(!keyword.isEmpty()){
			return TokenType.KEYWORD;
		} else if(!identifier.isEmpty()){
			return TokenType.IDENTIFIER;
		} else if(!integerConstant.isEmpty()){
			return TokenType.INT_CONST;
		} else if(!stringConstant.isEmpty()){
			return TokenType.STRING_CONST;
		}
		return null;
	}
	
	KeyWord keyWord(){
		if(keyword.equals("class")){
			return KeyWord.CLASS;
		} else if(keyword.equals("method")){
			return KeyWord.METHOD;
		} else if(keyword.equals("function")){
			return KeyWord.FUNCTION;
		} else if(keyword.equals("constructor")){
			return KeyWord.CONSTRUCTOR;
		} else if(keyword.equals("field")){
			return KeyWord.FIELD;
		} else if(keyword.equals("static")){
			return KeyWord.STATIC;
		} else if(keyword.equals("var")){
			return KeyWord.VAR;
		} else if(keyword.equals("int")){
			return KeyWord.INT;
		} else if(keyword.equals("char")){
			return KeyWord.CHAR;
		} else if(keyword.equals("boolean")){
			return KeyWord.BOOLEAN;
		} else if(keyword.equals("void")){
			return KeyWord.VOID;
		} else if(keyword.equals("true")){
			return KeyWord.TRUE;
		} else if(keyword.equals("false")){
			return KeyWord.FALSE;
		} else if(keyword.equals("null")){
			return KeyWord.NULL;
		} else if(keyword.equals("this")){
			return KeyWord.THIS;
		} else if(keyword.equals("let")){
			return KeyWord.LET;
		} else if(keyword.equals("do")){
			return KeyWord.DO;
		} else if(keyword.equals("if")){
			return KeyWord.IF;
		} else if(keyword.equals("else")){
			return KeyWord.ELSE;
		} else if(keyword.equals("while")){
			return KeyWord.WHILE;
		} else if(keyword.equals("return")){
			return KeyWord.RETURN;
		}
		return null;
	}
	
	char symbol(){
		return symbol.charAt(0);
	}
	
	String identifier(){
		return identifier;
	}
	
	String intVal(){
		return integerConstant;
	}
	
	String stringVal(){
		return stringConstant;
	}
	
	String getKeyword(){
		return keyword;
	}
	
	//check token
	public static void main(String[] argv) throws IOException{
		JackTokenizer a = new JackTokenizer("Square/SquareGame.jack");
		System.out.println(a.data);
		while (a.hasMoreTokens()) {
			System.out.println("TOKEN      :" + a.advance());
			System.out.println("SYMBOL     :" + a.symbol);
			System.out.println("IDENTIFIER :" + a.identifier);
			System.out.println("KEYWORD    :" + a.keyword);
			System.out.println("INTCONST   :" + a.integerConstant);
			System.out.println("STRINGCONST:" + a.stringConstant);
			System.out.println();
		}
	}
}
