package Assembler;

import java.io.File;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStreamWriter;
import java.nio.ByteBuffer;

public class Assembler {

	File file;
	FileOutputStream out;
	OutputStreamWriter writer;
	Parser parser;
	SymbolTable table;
	int finalAddress = 0x10;
	byte[] data;
	int index = 0;
	String infile;
	
	Assembler(String infile, String outfile) throws IOException{
		this.infile = infile;
		file = new File(outfile);
		out = new FileOutputStream(file);
		writer = new OutputStreamWriter(out);
		table = new SymbolTable();
	}
	
	byte[] cCommand(String dest, String comp, String jump){
		byte[] bytes = ByteBuffer.allocate(4).putInt(0xE000 | Code.dest(dest) | Code.comp(comp) | Code.jump(jump)).array();
		byte[] code = {bytes[2], bytes[3]};
		return code;
	}
	
	byte[] aCommand(String symbol){
		byte[] bytes = ByteBuffer.allocate(4).putInt(0x7FFF & table.getAddress(symbol)).array();
		byte[] code = {bytes[2], bytes[3]};
		return code;
	}
	
	void createSymbolTable() throws IOException{
		int address = finalAddress++;
		parser = new Parser(infile);
		while(parser.hasMoreCommands()){
			parser.advance();
			if(parser.symbol().matches("\\d+(\\.\\d+)?")){
				address = Integer.parseInt(parser.symbol());
			}
			table.addEntry(parser.symbol(), address);
		}
	}
	
	void writeCode() throws IOException{
		parser = new Parser(infile);
		while(parser.hasMoreCommands()){
			parser.advance();
			byte[] code = new byte[2];
			if(parser.commandType() == Parser.A_COMMAND){
				code = aCommand(parser.symbol());
			} else if(parser.commandType() == Parser.C_COMMAND){
				code = cCommand(parser.dest(), parser.comp(), parser.jump());
			}
			data[index++] = code[0];
			data[index++] = code[1];
		}
		out.write(data);
		out.close();
	}
	
	public static void main(String argv[]) throws IOException{
		Assembler asm = new Assembler("Add.asm", "test.hack");
		asm.createSymbolTable();
		//asm.writeCode
		Collection<Integer> values = asm.table.values();
		
		
	}
}
