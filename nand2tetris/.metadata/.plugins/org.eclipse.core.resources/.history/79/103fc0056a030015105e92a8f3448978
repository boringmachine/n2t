package VMtranslator;

import java.io.File;
import java.util.ArrayList;
import java.util.HashMap;

public class VMtranslator {

	// debug
	public static void main(String args[]) throws Exception {
		File file = new File("VM/"+args[0]);
		if(file.isDirectory()){
			StringBuilder asm = new StringBuilder();
			String files[] = listFiles(file);
			HashMap<String, Parser> list = new HashMap<String, Parser>();
			for(String fileStr : files){
				list.put(fileStr, new Parser(fileStr));
				if(fileStr.equals("Sys.vm")){
					asm.append(list.get("Sys.vm").data.toString()+"\n");
					list.remove("Sys.vm");
				}
			}
			for(Parser p : list.values()){
				asm.append(p.data.toString()+"\n");
			}
			
		}
		
		Parser parser1 = new Parser(args[0]);
		// Parser parser2 = new Parser("VM/SimpleAdd.vm");

		CodeWriter writer = new CodeWriter(args[0]+".vm", "Asm/" + args[0] + ".asm");
		while (parser1.hasMoreCommands()) {
			parser1.advance();
			System.out.println(parser1.command);
			if (parser1.commandType() == Parser.C_ARITHMETIC) {
				writer.writeArithmetic(parser1.type);
			} else if(parser1.commandType() == Parser.C_GOTO){
				writer.writeGoto(parser1.arg1());
			} else if(parser1.commandType() == Parser.C_IF) {
				writer.writeIf(parser1.arg1());
			} else if(parser1.commandType() == Parser.C_LABEL){
				writer.writeLabel(parser1.arg1());
			} else if(parser1.commandType() == Parser.C_FUNCTION){
				writer.writeFunction(parser1.arg1(), Integer.parseInt(parser1.arg2()));
			} else if(parser1.commandType() == Parser.C_CALL){
				writer.writeCall(parser1.arg1(), Integer.parseInt(parser1.arg2()));
			} else if(parser1.commandType() == Parser.C_RETURN){
				writer.writeReturn();
			}
			
			else {
				writer.writePushPop(parser1.type, parser1.arg1(),
						Integer.parseInt(parser1.arg2()));
			}

		}
		writer.close();
	}

	public static String[] listFiles(final File folder) {
		StringBuilder files = new StringBuilder();
	    for (final File fileEntry : folder.listFiles()) {
            files.append(fileEntry.getName()+":");
	    }
	    return files.toString().split(":");
	}
}
