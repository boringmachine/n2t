package Compiler;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStreamWriter;

public class CompilationEngine {

	JackTokenizer tokenizer;
	private File file;
	private FileOutputStream out;
	private OutputStreamWriter writer;
	private int tabCounter;

	
	CompilationEngine(String infile, String outfile) throws Exception{
		tokenizer = new JackTokenizer(infile);
		file = new File(outfile);
		out = new FileOutputStream(file);
		writer = new OutputStreamWriter(out);
		tabCounter = 0;
		tokenizer.advance();
		if(isCorrectToken(TokenType.KEYWORD) &&  isCorrectKeyword(KeyWord.CLASS)){
			compileClass();
		}
	}
	
	void compileClass() throws Exception{
		write("<class>", false);
		write(tokenizer.getKeyword(), true);
		tokenizer.advance();
		if(isCorrectToken(TokenType.IDENTIFIER)){
			write(tokenizer.identifier(), false);
		}
		tokenizer.advance();
		if(isCorrectSymbol('{')){
			write(""+tokenizer.symbol(), false);
		}
		while()
		compileClassVarDec();
		subroutineDec();
	}
	
	private boolean isCorrectToken(TokenType t) throws Exception{
		return tokenizer.tokenType() == t;
	}
	
	private boolean isCorrectSymbol(char s) throws Exception{
		return (tokenizer.tokenType() == TokenType.SYMBOL) && tokenizer.symbol() == s;
	}
	
	private boolean isCorrectKeyword(KeyWord k){
		return tokenizer.keyWord() == k;
	}
	
	
	void write(String line, boolean tabflag) throws IOException{
		if(tabflag){
			tabCounter++;
		}
		for(int i=0;i<tabCounter;i++){
			writer.write("\t");
		}
		writer.write(line + "\n");
	}
}
