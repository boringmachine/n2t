package VMtranslator;

import java.io.File;

public class VMtranslator {

	// debug
	public static void main(String args[]) throws Exception {
		File file;
		if((file = new File("VM/"+args[0])).isDirectory()){
			String[] files = listFiles(file).split(" ");
		}
		Parser parser1 = new Parser("VM/" + args[0] + ".vm");
		// Parser parser2 = new Parser("VM/SimpleAdd.vm");

		CodeWriter writer = new CodeWriter(args[0]+".vm", "Asm/" + args[0] + ".asm");
		while (parser1.hasMoreCommands()) {
			parser1.advance();
			System.out.println(parser1.command);
			if (parser1.commandType() == Parser.C_ARITHMETIC) {
				writer.writeArithmetic(parser1.type);
			} else if(parser1.commandType() == Parser.C_GOTO){
				writer.writeGoto(parser1.arg1());
			} else if(parser1.commandType() == Parser.C_IF) {
				writer.writeIf(parser1.arg1());
			} else if(parser1.commandType() == Parser.C_LABEL){
				writer.writeLabel(parser1.arg1());
			} else if(parser1.commandType() == Parser.C_FUNCTION){
				writer.writeFunction(parser1.arg1(), Integer.parseInt(parser1.arg2()));
			} else if(parser1.commandType() == Parser.C_CALL){
				writer.writeCall(parser1.arg1(), Integer.parseInt(parser1.arg2()));
			} else if(parser1.commandType() == Parser.C_RETURN){
				writer.writeReturn();
			}
			
			else {
				writer.writePushPop(parser1.type, parser1.arg1(),
						Integer.parseInt(parser1.arg2()));
			}

		}
		writer.close();
	}

	public static String listFiles(final File folder) {
		StringBuilder files = new StringBuilder();
	    for (final File fileEntry : folder.listFiles()) {
	        if (fileEntry.isDirectory()) {
	            listFiles(fileEntry);
	        } else {
	            files.append(fileEntry.getName()+" ");
	        }
	    }
	    return files.toString();
	}
}
