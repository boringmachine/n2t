package Assembler;

import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.LinkedList;
import java.util.Scanner;

public class Parser {

	File file;
	FileInputStream in;
	InputStreamReader reader;
	String command;
	String symbol;
	String data;
	LinkedList parsed;
	
	
	static final int A_COMMAND = 0x1;
	static final int C_COMMAND = 0x2;
	static final int L_COMMAND = 0x4;
	
	Scanner scan;
	
	Parser(String filename) throws IOException{
		this.file = new File(filename);
		in = new FileInputStream(file);
		reader = new InputStreamReader(in);
		char[] data = new char[(int) file.length()];
		reader.read(data);
		String str = new String(data);
		str = str.replaceAll(" ", "").replaceAll("//.*\r\n?\r?\n?", "");
		reader = new InputStreamReader(new ByteArrayInputStream(str.getBytes("UTF-8")));
		scan = new Scanner(str);
		parsed = new LinkedList();
	}
	
	boolean hasMoreCommands() throws IOException{
		return reader.ready();
	}
	
	void advance() throws IOException{
		command = scan.next();
		parsed.add(command);
	}
	
	
	int commandType(){
		if(command.startsWith("@")) return A_COMMAND ;
		else if(command.startsWith("(")) return L_COMMAND;
		else return C_COMMAND;
	}
	
	String symbol() {
		if(commandType() == A_COMMAND){
			symbol = command.replaceFirst("@", "");
		} else if(commandType() == L_COMMAND){
			symbol = command.replace("(", "").replace(")", "");
		}
		
		return symbol;
	}
	
	
	String dest () {
		if(commandType() == C_COMMAND){
			return command.replaceAll("=.*", "");
		}
		return null;
	}
	
	String comp () {
		if(commandType() == C_COMMAND){
			return command.replaceAll(";.*","");
		}
		return null;
	}
	
	String jump () {
		if(commandType() == C_COMMAND){
			return command.replaceAll(".*;?", "");
		}
		return null;
	}
	
	
	public static void main(String args[]) throws IOException{
		Parser a = new Parser("Add.asm");
		a.advance();
		System.out.println(a.parsed.get(0));
		System.out.println(a.symbol());
		a.advance();
		System.out.println(a.parsed.get(0));
		System.out.println(a.dest());
		System.out.println(a.comp());
		System.out.println(a.jump());
	}

	
}
