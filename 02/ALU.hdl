// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise


    PARTS:
    Not(in=zx, out=nzx);
    Mux16(a[0]=nzx,a[1]=nzx,a[2]=nzx,a[3]=nzx,
          a[4]=nzx,a[5]=nzx,a[6]=nzx,a[7]=nzx,
	  a[8]=nzx,a[9]=nzx,a[10]=nzx,a[11]=nzx,
	  a[12]=nzx,a[13]=nzx,a[14]=nzx,a[15]=nzx,
	  b=x[0..15],
	  sel=nzx, out=zxdo);

    Not16(in=zxdo, out=nxdo);
    Mux16(a=zxdo,b=nxdo, sel=nx, out=buf1);

    Not(in=zy, out=nzy);
    Mux16(a[0]=nzy,a[1]=nzy,a[2]=nzy,a[3]=nzy,
          a[4]=nzy,a[5]=nzy,a[6]=nzy,a[7]=nzy,
	  a[8]=nzy,a[9]=nzy,a[10]=nzy,a[11]=nzy,
	  a[12]=nzy,a[13]=nzy,a[14]=nzy,a[15]=nzy,
	  b=y[0..15],
	  sel=nzy, out=zydo);

    Not16(in=zydo, out=nydo);
    Mux16(a=zydo,b=nydo, sel=ny, out=buf2);
 
    Add16(a=buf1, b=buf2, out=added);
    And16(a=buf1, b=buf2, out=anded);

    Mux16(a=anded, b=added, sel=f, out=norot);

    Not16(in=norot, out=rot);

    Mux16(a=norot, b=rot, sel=no, out=o1);
    Mux16(a=norot, b=rot, sel=no, out=out[0..15]);
    
    Or16Way(in=o1, out=o2);
    Not(in=o2, out=zr);

    Not(in=x[0], out=nx0);
    And(a=x[0], b=nx0, out=zero);
    Not(in=zero, out=one);

    And16(a[0]=zero,a[1]=zero,a[2]=zero,a[3]=zero,
	  a[4]=zero,a[5]=zero,a[6]=zero,a[7]=zero,
	  a[8]=zero,a[9]=zero,a[10]=zero,a[11]=zero,
	  a[12]=zero,a[13]=zero,a[14]=zero,a[15]=one,
	  b=o1,
	  out=o3);
    Or16Way(in=o3, out=ng);
    
    
}